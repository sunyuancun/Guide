文档地址

    https://snailclimb.top/JavaGuide/#/


1. 面向对象和面向过程的区别  

    面向过程 ：面向过程性能比面向对象高。  因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix等一般采用面向过程开发。但是，面向过程没有面向对象易维护、易复用、易扩展。
    面向对象 ：面向对象易维护、易复用、易扩展。 因为面向对象有封装、继承、多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。但是，面向对象性能比面向过程低。
    
    总结： 因为面向对象 (不是直接编译成CPU执行的机械码)  类需要实例化，内存开销大，耗费资源，性能面向过程比面向对象好，但是面向对象有封装/继承/多态等特性，可以降低耦合度，更加灵活，容易维护，复用，扩展

2. Java程序编译和运行的过程

    1、源文件由编译器编译成字节码（ByteCode）    .java ----> .class (字节码文件格式主要分为两部分：常量池和方法字节码。常量池记录的是代码出现过的所有token(类名，成员变量名等等)以及符号引用（方法引用，成员变量引用等等）；方法字节码放的是类中各个方法的字节码。)

            javac  xx.java  编译  xx.class    
            javap -v  查看字节码   

    2、字节码由java虚拟机解释运行

        java类运行的过程大概可分为两个过程：1、类的加载  2、类的执行。
        JVM主要在程序第一次主动使用类的时候，才会去加载该类。  用的时候才加载，只加载一次。
        运行步骤： java xx.class 
        
        1. 系统就会启动一个jvm进程，jvm进程从classpath路径中找到一个名为AppMain.class的二进制文件，将MainApp的类信息加载到运行时数据区的方法区内，
        2. 然后JVM找到AppMain的主函数入口，开始执行main函数。

    java程序既要编译同时也要经过JVM的解释运行，所以说Java被称为半解释语言

3. Java语言有哪些特点
        1. 面向对象 /封装，继承，多态/
        2. 安全性 可靠性
        3. 支持多线程
        4. 支持网络编程
        5. 编译与解释并存
        6. 平台无关性（ Java 虚拟机实现平台无关性）；

4. 关于 JVM JDK 和 JRE 最详细通俗的解答

    JVM

    Java虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM有针对不同系统的特定实现（Windows，Linux，macOS）,目的是使用相同的字节码，它们都会给出相同的结果。
    ，目的是使用相同的字节码.
    字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。
    在 Java 中，JVM可以理解的代码就叫做字节码（即扩展名为 .class 的文件），它不面向任何特定的处理器，只面向虚拟机

    JDK和JRE
    JDK是Java Development Kit，它是功能齐全的Java SDK。它拥有JRE所拥有的一切，还有编译器（javac）和工具（如javadoc和jdb）。它能够创建和编译程序。
    JRE 是 Java运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java虚拟机（JVM），Java类库，java命令和其他的一些基础构件。但是，它不能用于创建新程序。


5.  Java和C++的区别?

    1. 都是面向对象的语言，都支持封装、继承和多态
    2. Java 不提供指针来直接访问内存，程序内存更加安全
    3. Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。
    4. Java 有自动内存管理机制，不需要程序员手动释放无用内存

6. 字符型常量和字符串常量的区别?
    形式上: 字符常量是单引号引起的一个字符; 字符串常量是双引号引起的若干个字符
    含义上: 字符常量相当于一个整型值( ASCII 值),可以参加表达式运算; 字符串常量代表一个地址值(该字符串在内存中存放位置)
    占内存大小 字符常量只占2个字节; 字符串常量占若干个字节(至少一个字符结束标志) (注意： char在Java中占两个字节)

7. 构造器 Constructor 是否可被 override（重写）?

    在讲继承的时候我们就知道父类的私有属性和构造方法并不能被继承，
    所以 Constructor 也就不能被 override（重写）,但是可以 overload（重载）,所以你可以看到一个类中有多个构造函数的情况。

8.  重载(overload（重载）)和重写(override（重写）)的区别   

    重载： 发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同，发生在编译时。 　　
    重写： 发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类；
    如果父类方法访问修饰符为 private 则子类就不能重写该方法

9. Java 面向对象编程三大特性: 封装 继承 多态

    封装
    封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性和方法，（常见的实现方式就是：getter、setter。）
    如果属性不想被外界访问，我们大可不必提供方法给外界访问。
    封装遵循了“开闭原则”，禁止外部直接访问和修改类的信息。

    继承（区别组合  继承是is关系，组合是has关系。）
    继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。
     要点：

     1. 子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，只是拥有。
     2. 子类可以拥有自己属性和方法，即子类可以对父类进行扩展。
     3. 子类可以用自己的方式实现父类的方法。（以后介绍）。

    1. 在子类的覆写方法中，如果要调用父类的被覆写的方法，可以通过super来调用。
    2. 继承可以允许子类覆写父类的方法。如果一个父类不允许子类对它的某个方法进行覆写，可以把该方法标记为final。用final修饰的方法不能被Override

     多态

        指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。
        实现多态的技术称为：动态绑定（dynamic binding），是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。

        多态存在的三个必要条件 一、要有继承； 二、要有重写； 三、父类引用指向子类对象。
        Java中多态的实现方式：接口实现，继承父类进行方法重写，同一个类中进行方法重载。（java例子）
        Java中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。

       可见，多态具有一个非常强大的功能，就是允许添加更多类型的子类实现功能扩展，却不需要修改基于父类的代码。

        所有的class最终都继承自Object，而Object定义了几个重要的方法：

            toString()：把instance输出为String；
            equals()：判断两个instance是否逻辑相等；
            hashCode()：计算一个instance的哈希值。
            在必要的情况下，我们可以覆写Object的这几个方法。


    

10. 类变量、成员变量和局部变量

    类变量(静态变量)：用static修饰的变量称为静态变量，其内容被该类的所有对象共享，所有对象中这个类变量的值都指向相同的一处内存，随便一个对象修改了此处内存的值都会影响其他对象。
    成员变量：在类定义时声明的变量，随着对象的建立而建立，随着对象的消失而消失，存在于对象所在的堆内存中。
    局部变量：在函数中声明的变量，只定义在局部范围内，只在所属的区域有效。存在于栈内存中，作用的范围结束，栈帧释放，变量就消失。

11. 构造函数与默认构造函数

    构造函数是用来初始化对象的，一个类可以重载多个构造函数。
    需要注意的是：默认情况下,一个类会有一个默认的构造函数,这个构造函数没有内容也没有返回值,一般都略去不写。
    但是,如果一个类定义了一个有参数有方法体的构造函数,这时编译器就不会再给它默认加上一个无参且方法体为空的构造函数，可以理解为无参的构造函数被覆盖，此时需要手动定义一个无参构造函数。
    在函数的继承里,子类必须使用super来实现对父类的非默认构造函数的调用.在创建对象时，先调用父类默认构造函数，然后调用子类自身自己定义的构造函数。

12. 继承（extends）和实现（implements）的区别
    概念不同
         继承：子类与父类的继承。如果多个类的某个部分的功能相同，那么可以抽象出一个类出来，把他们的相同部分都放到父类里，让他们都继承这个类。
         实现：接口的实现。如果多个类都有一个行为，但是处理的方法方式不同，那么就定义一个接口，也就是一个标准，让各个类分别实现这个接口，各自实现自己具体的处理方法。
    数量不同
         单继承，多实现。
    格式不同
        在接口中只能定义全局常量（static final）,和空的方法体；而在继承中可以定义属性方法,变量,常量等...
    用法不同
        某个接口被类实现时,在类中一定要实现接口中的抽象方法；而继承则无需。


13. 接口和抽象类的区别是什么？
    1. 口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。
    2. 接口中除了static、final变量，不能有其他变量，而抽象类中则没有限制。
    3. 一个类可以实现多个接口，但只能继承一个抽象类


14. final修饰符有多种作用

    final修饰的方法可以阻止被覆写；
    final修饰的class可以阻止被继承；
    final修饰的field必须在创建对象时初始化，随后不可修改。
        

15. 自动装箱与拆箱

    装箱：将基本类型用它们对应的引用类型包装起来；
    拆箱：将包装类型转换为基本数据类型；


16. String、StringBuffer和StringBuilder的区别

    1.  可变性与不可变性
       String 是不可变的 因为String 类中使用 final 关键字修饰字符数组来保存字符串。final　char　value[]
       StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串char[]value 但是没有用 final 关键字修饰，
    
    2. 线程安全性
        String 中的对象是不可变的，也就可以理解为常量，线程安全。
        AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。
        StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。　
    
    3. 性能
        每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。

    三者使用的总结：
    操作少量的数据: 适用String
    单线程操作字符串缓冲区下操作大量数据: 适用StringBuilder
    多线程操作字符串缓冲区下操作大量数据: 适用StringBuffer


17. 创建一个对象用什么运算符?对象实体与对象引用有何不同?
    new运算符，new创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。
    一个对象引用可以指向0个或1个对象，一个对象可以有n个引用指向它

18. 一个类的构造方法的作用是什么? 若一个类没有声明构造方法，该程序能正确执行吗? 为什么?
    要作用是完成对类对象的初始化工作。可以执行。因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法。

19. 构造方法有哪些特性？
    1. 名字与类名相同。
    2. 没有返回值，但不能用void声明构造函数。
    3. 生成类的对象时自动执行，无需调用。

20. 静态方法和实例方法有何不同
    1. 在外部调用静态方法时，可以使用"类名.方法名"的方式，也可以使用"对象名.方法名"的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。
    2. 静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制。

21. 对象的相等与指向他们的引用相等,两者有什么不同?
    对象的相等，比的是内存中存放的内容是否相等。而引用相等，比较的是他们指向的内存地址是否相等。

22. == 与 equals(重要)

    == : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象(基本数据类型==比较的是值，引用数据类型==比较的是内存地址)。
    
    equals() : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：
    情况1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。
    情况2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来比较两个对象的内容是否相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。

23. hashCode 与 equals (重要)

    1. hashCode（）介绍
        hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。
        “HashSet 如何检查重复原理：
             当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，
             如果没有相符的hashcode，HashSet会假设对象没有重复出现。
             但是如果发现有相同 hashcode 值的对象，这时会调用 equals（）方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。

24. 线程 与 进程 

    线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。

    进程是程序的一次执行过程，是系统运行程序的基本单位，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如CPU时间，内存空间，

     线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。
    
    要点：
        1. 进程是线程的容器，线程是程序执行的最小单元。 一个程序至少有一个进程，一个进程至少有一个线程。
        2. 进程往往有独立的运行入口，顺序执行序列，独立的运行出口。线程不能独立执行，必须依存于应用程序，由应用程序来进行线程控制。
        3. 多进程程序要比多线程程序健壮，但在进程切换时，资源消耗较大，效率要差一些。
        4. 对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。
        5. 数据共享性：多进程共享依赖复杂的进程间通信；多线程数据共享因共享进程数据而十分简单。
        6. Java本身运行在JVM虚拟机中，而Java的多进程通信又只能依赖于管道和socket，在绝大多情况下，应该考虑的是多线程而非多进程。

25. 线程有哪些基本状态?

    线程创建之后它将处于 NEW（新建） 状态，调用 start() 方法后开始运行，线程这时候处于 READY（可运行） 状态。可运行状态的线程获得了 cpu 时间片（timeslice）后就处于 RUNNING（运行） 状态。
    当线程执行 wait()方法之后，线程进入 WAITING（等待）状态。进入等待状态的线程需要依靠其他线程的通知才能够返回到运行状态，而 TIME_WAITING(超时等待) 状态相当于在等待状态的基础上增加了超时限制，比如通过 sleep（long millis）方法或 wait（long millis）方法可以将 Java 线程置于 TIMED WAITING 状态。当超时时间到达后 Java 线程将会返回到 RUNNABLE 状态。
    当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到 BLOCKED（阻塞） 状态。线程在执行 Runnable 的run()方法之后将会进入到 TERMINATED（终止） 状态。

26. 线程间数据共享 和 传递数据

    当访问共同的代码的时候：可以使用同一个Runnable对象，这个Runnable对象中有这个共享数据，比如卖票系统就可以这么做。
    或者这个共享数据封装在一个对象当中，然后对这个对象加锁，也可以实现数据安全访问。


27. 线程间通信
        A.join() 方法会让 B 一直等待直到 A 运行完毕。（B1 B2 B3 A1 A2 A3）

            Thread A = new Thread(new Runnable() {
                @Override
                public void run() {
                    printNumber("A");
                }
             });

                Thread B = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        System.out.println("B 开始等待 A");
                        try {
                            A.join();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }

                        printNumber("B");
                    }
                });

                B.start();
                A.start();


        线程按照指定方式有序交叉运行(更细粒度的锁来控制执行顺序) A1 B1 B2 B3 A2 A3 
        1.  Object lock = new Object(); 
        2. A 加锁 synchronized (lock) { A1} A2 A3  B加锁  synchronized (lock) {B1 B2 B3}
        3.  lock.wait();线程等待； lock.notify(); 解锁通知
        4. 线程start 
            /**
            * A 1, B 1, B 2, B 3, A 2, A 3
            */
            private static void demo3() {
                Object lock = new Object();

                Thread A = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        synchronized (lock) {
                            System.out.println("A 1");
                            try {
                                lock.wait();
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }

                            System.out.println("A 2");
                            System.out.println("A 3");
                        }

                    }
                });

                Thread B = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        synchronized (lock) {
                            System.out.println("B 1");
                            System.out.println("B 2");
                            System.out.println("B 3");

                            lock.notify();
                        }
                    }
                });

                A.start();
                B.start();
            }


        线程ABC并行完成，线程D再执行
        我们希望达到的目的是：A B C 三个线程同时运行，各自独立运行完后通知 D；
        对 D 而言，只要A B C 都运行完了，D 再开始运行。
        针对这种情况，我们可以利用 CountdownLatch 来实现这类通信方式。

        CountDownLatch 适用于一个线程去等待多个线程的情况。
        CountDownLatch 就是一个倒计数器，我们把初始计数值设置为3，
        当 D 运行时，先调用 countDownLatch.await() 检查计数器值是否为 0，若不为 0 则保持等待状态；
        当A B C 各自运行完后都会利用countDownLatch.countDown()，将倒计数器减 1，
        当三个都运行完后，计数器被减至 0；此时立即触发 D 的 await() 运行结束，继续向下执行。


            private static void runDAfterABC() {
                int worker = 3;
                CountDownLatch countDownLatch = new CountDownLatch(worker);

                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        System.out.println("D is waiting for other three threads");
                        try {
                            countDownLatch.await();
                            System.out.println("All done, D starts working");
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }

                    }
                }).start();

                for (char threadName='A'; threadName <= 'C'; threadName++) {
                    final String tN = String.valueOf(threadName);
                    new Thread(new Runnable() {
                        @Override
                        public void run() {
                            System.out.println(tN + " is working");
                            try {
                                Thread.sleep(100);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            System.out.println(tN + " finished");
                            countDownLatch.countDown();
                        }
                    }).start();
                }
            }


28. 关于 final 关键字的一些总结

    final关键字主要用在三个地方：变量、方法、类。
    1. 对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；
        如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。（对象属性可变）
    2.  当用final修饰一个类时，表明这个类不能被继承。final类中的所有成员方法都会被隐式地指定为final方法。  
    3. 使用final方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；

29. IO操作

    Java IO类库可以分为输入流和输出流，输入流来读数据，输出流来写数据。

     //输出流
    public static void outputStream() throws IOException{
        //创建一个File实例
        File file = new File("/home/wenhaibo/IOTest.txt");
        //FileOutputStream为文件输出流
        FileOutputStream out = new FileOutputStream(file);
        //将内容转换为字节码输出
        out.write("This is IOTest".getBytes());
        //强制输出内存中所有内容
        out.flush();
        //关闭输出流
        out.close();
    }

      //输入流
    public static void inputStream() throws IOException{
        //创建一个File实例
        File file = new File("/home/wenhaibo/IOTest.txt");
        //FileInputStream为文件输入流
        FileInputStream in = new FileInputStream(file);
        byte[] b = new byte[1024];
        //将 byte.length 个字节的数据读入一个 byte 数组中
        int len =in.read(b);
        //将字节码转为字符串打印输出
        System.out.println(new String(b, 0, len));
        //关闭输入流
        in.close();
    }


    字节流和字符流，处理字符流用Reader、Writer两个专门操作字符流的类

     //字符流 FileWriter
    public static void outputStreamWriter() throws IOException{
        //创建一个File实例
        File file = new File("/home/wenhaibo/IOTest.txt");
        //FileWriter为文件输出流
        Writer out = new FileWriter(file);
        //直接输出字符
        out.write("This is IOTest");
        //强制输出内存中所有内容
        out.flush();
        //关闭输出流
        out.close();
    }
    //字符流 FileReader
    public static void inputStreamReader() throws IOException{
        //创建一个File实例
        File file = new File("/home/wenhaibo/IOTest.txt");
        //Reader为文件输入流
        Reader in=new FileReader(file);
        char[] c=new char[1024];
        //将 byte.length 个字节的数据读入一个 byte 数组中
        int len =in.read(c);
        //将字节码转为字符串打印输出
        System.out.println(new String(c, 0, len));
        //关闭输入流
        in.close();
    }

    缓冲流
        缓冲流是在输入流和输出流之上进行了一次包装（装饰器设计模式），
        目的是解决频繁写入/读取数据时效率差的问题。
        缓冲流先将数据缓存起来，然后一起写入或读取出来。

        字节缓冲流类：BufferedInputStream 和 BufferedOutputStream
        字符缓冲流类：BufferedReader 和 BufferedWriter

    一般在关闭输出流之前，要先调用flush()方法强制缓冲区中的内容输出，并清空缓冲区。



30. 泛型 
    泛型是一种“代码模板”，可以用一套代码套用各种类型。
    泛型的好处是使用时不必对类型进行强制转换，它通过编译器对类型进行检查；
    使用泛型时，把泛型参数<T>替换为需要的class类型，例如：ArrayList<String>，ArrayList<Number>等；
    不指定泛型参数类型时，编译器会给出警告，且只能将<T>视为Object类型；
    编写泛型类时，要特别注意，泛型类型<T>不能用于静态方法。
    泛型可以同时定义多种类型，例如Map<K, V>。

31. 反射 
    反射就是Reflection，Java的反射是指程序在运行期可以拿到一个对象的所有信息。
    反射是为了解决在运行期，对某个实例一无所知的情况下，如何调用其方法。
    这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。

    反射实现的步骤：
        1.首先得到class这个类。
·               1.使用class类的forName();方法  Class<?> classType = Class.forName("people");
                2. 是使用  .class语法          Class<?> classType = People.class();
        2.获取class对象（实例）。

        3.然后就可以获得方法，属性等。

        所有类的对象其实就是class的实例


        调用方法的Invoke()方法，这个方法的作用就是调用


32. Java 中的异常处理

     Java 中，所有的异常都有一个共同的祖先java.lang包中的 Throwable类。Throwable： 有两个重要的子类：Exception（异常） 和 Error（错误） ，
     1. Error（错误）:是程序无法处理的错误，表示运行应用程序中较严重问题。大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。
     2. Exception（异常）:是程序本身可以处理的异常。Exception 类有一个重要的子类 RuntimeException。RuntimeException 异常由Java虚拟机抛出。

    注意：异常和错误的区别：异常能被程序本身处理，错误是无法处理。

    异常处理：
    try 块： 用于捕获异常。其后可接零个或多个catch块，如果没有catch块，则必须跟一个finally块。
    catch 块： 用于处理try捕获到的异常。
    finally 块： 无论是否捕获或处理异常，finally块里的语句都会被执行。当在try块或catch块中遇到return 语句时，finally语句块将在方法返回之前被执行。

33. JAva ClassLoader 加载器
       
    1. ClassLoader 做什么的？
         是用来加载 Class 的。它负责将 Class 的字节码形式转换成内存形式的 Class 对象
        字节码可以来自于磁盘文件 *.class，也可以是 jar 包里的 *.class，也可以来自远程服务器提供的字节流，字节码的本质就是一个字节数组 []byte，它有特定的复杂的内部格式。

    2. 延迟加载
        JVM 运行并不是一次性加载所需要的全部类的，它是按需加载，也就是延迟加载。
        。加载完成后就会将 Class 对象存在 ClassLoader 里面，下次就不需要重新加载了。

    3. JVM 运行实例中会存在多个 ClassLoader，不同的 ClassLoader 会从不同的地方加载字节码文件。
        JVM 中内置了三个重要的 ClassLoader，分别是 BootstrapClassLoader、ExtensionClassLoader 和 AppClassLoader。
        BootstrapClassLoader 负责加载 JVM 运行时核心类，
        ExtensionClassLoader 负责加载 JVM 扩展类，库名通常以 javax 开头，
        AppClassLoader 才是直接面向我们用户的加载器，它会加载 Classpath 环境变量里定义的路径中的 jar 包和目录。
        我们自己编写的代码以及使用的第三方 jar 包通常都是由它来加载的。
        URLClassLoader  位于网络上静态文件服务器提供的 jar 包和 class文件，jdk 内置了一个 URLClassLoader，用户只需要传递规范的网络路径给构造器，就可以使用 URLClassLoader 来加载远程类库了。

        AppClassLoader 可以由 ClassLoader 类提供的静态方法 getSystemClassLoader() 得到，它就是我们所说的「系统类加载器」，我们用户平时编写的类代码通常都是由它加载的。

    4. 双亲委派
         AppClassLoader 只负责加载 Classpath 下面的类库，
         如果遇到没有加载的系统类库怎么办，AppClassLoader 必须将系统类库的加载工作交给 BootstrapClassLoader 和 ExtensionClassLoader 来做，这就是我们常说的「双亲委派」。


34. JAVA 内存管理  垃圾回收GC

    1. 内存性能计算
        java.lang.Runtime.getRuntime()

        Runtime runtime = Runtime.getRuntime();
        // Run the garbage collector
        runtime.gc();
        // Calculate the used memory
        long memory = runtime.totalMemory() - runtime.freeMemory();
        得到程序使用/空闲的内存

    2. 内存管理三种基本模式
        1. 静态内存分配 Static allocation  // 在将程序load进内存的时候、或开始执行时，确定所有对象的分配,运行时无法改变  // 不支持动态创建的可变长的复杂数据类型
        2. 动态，基于栈(Stack)  // 某些对象延续的时间比创建它的方法所延续的时间更长（所以stack不行）
        3. 动态，基于堆(Heap)  //一块内存里分为多个小块，每块包含一个对象，或者未被占用,代码中的一个变量ref可在不同时间被指向到不同的内存对象上，无法在编译阶段确定。
        // 自由模式的内存管理，动态分配，可管理复杂的动态数据结构
        
     3. 内存管理模型

        1. 所有对象都在堆上创建,堆上创建的对象可被所有线程共享引用
        一个线程可访问对象时，就可以访问对象内的成员变量,如果两个线程调用同一个对象上的某个方法，它们都可以访问这个对象的成员变量，但每个线程分别保留对局部变量的拷贝


    4. 垃圾回收 算法
     


     






